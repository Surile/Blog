<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜雨</title>
  
  <subtitle>可爱の妮妮酱,嗯...,对,就是我的,就是这样,没啥毛病,(づ￣ 3￣)づ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.surile.cn/"/>
  <updated>2019-03-11T08:23:56.044Z</updated>
  <id>http://www.surile.cn/</id>
  
  <author>
    <name>夜雨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信小程序的坑</title>
    <link href="http://www.surile.cn/category/2019/03/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9D%91.html"/>
    <id>http://www.surile.cn/category/2019/03/11/微信小程序的坑.html</id>
    <published>2019-03-11T08:12:33.000Z</published>
    <updated>2019-03-11T08:23:56.044Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><hr><p>设置粗体时真机不显示，设置 style 才可以在真机显示粗体</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.font = <span class="string">"normal bold 18px arial,sans-serif"</span>;</span><br></pre></td></tr></table></figure><p>真机上无法显示网络图片，只有先下载到本地，才能在真机显示，有两种方法，分别列出</p><ol><li><strong>wx.downloadFile</strong>,具体请看<a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.downloadFile.html" target="_blank" rel="noopener">官方文档</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wx.downloadFile(&#123;</span><br><span class="line">  url: <span class="string">"https://example.com/audio/123"</span>, <span class="comment">// 仅为示例，并非真实的资源</span></span><br><span class="line">  success(res) &#123;</span><br><span class="line">    <span class="comment">// 只要服务器有响应数据，就会把响应内容写入文件并进入 success 回调，业务需要自行判断是否下        载到了想要的内容</span></span><br><span class="line">    <span class="keyword">if</span> (res.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">      wx.playVoice(&#123;</span><br><span class="line">        filePath: res.tempFilePath</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.<strong>wx.getImageInfo</strong>,具体请看<a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.getImageInfo.html" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.getImageInfo(&#123;</span><br><span class="line">  src: <span class="string">"https://example.com/audio/123"</span>, <span class="comment">//仅为示例，并非真实的资源</span></span><br><span class="line">  success(res) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.path); <span class="comment">// 获取图片地址</span></span><br><span class="line">    <span class="built_in">console</span>.log(res.width);</span><br><span class="line">    <span class="built_in">console</span>.log(res.height);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="原生组件层级"><a href="#原生组件层级" class="headerlink" title="原生组件层级"></a>原生组件层级</h3><hr><p>在微信小程序中原生组件的层级最高，所有在怎么设置 z-index 也没什么卵用，但微信官方给了<strong>cover-view</strong>组件，可覆盖原生组件。</p><h3 id="scroll-view-无法设置横向滚动"><a href="#scroll-view-无法设置横向滚动" class="headerlink" title="scroll-view 无法设置横向滚动"></a>scroll-view 无法设置横向滚动</h3><p>这个坑呢，我是在 mpvue 中使用的时候遇到的，后来被这个问题弄得头大，也是在 mpvue 中的 issues 中找到解决办法的，具体怎么解决，我就不放代码了，直接放链接吧！！！</p><p>解决办法：</p><p><a href="https://github.com/Meituan-Dianping/mpvue/issues/416" target="_blank" rel="noopener">mpvue 使用小程序的 scroll-view 横向不能滚动</a></p><h3 id="高适应性的自定义导航栏开发思路"><a href="#高适应性的自定义导航栏开发思路" class="headerlink" title="高适应性的自定义导航栏开发思路"></a>高适应性的自定义导航栏开发思路</h3><p>一、默认导航栏计算高度</p><ul><li><code>wx.getSystemInfo</code> 和 <code>wx.getSystemInfoSync</code> 获取机器信息</li><li><code>screenHeight</code> - <code>windowHeight</code> 计算标题栏高度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'iPhone'</span>:<span class="number">64</span>,</span><br><span class="line"><span class="string">'iPhoneX'</span>:<span class="number">88</span>,</span><br><span class="line"><span class="string">'android'</span>:<span class="number">68</span></span><br></pre></td></tr></table></figure><ul><li>不完全统计（ip6 , ip5 , ip6p , ipx , 小米 mix2 , 小米 5 等综合了开发工具提供的数据和真机数据）所得</li></ul><p>二、自定义导航栏高度由谁决定？（自定义情况下，屏幕高度和窗口高度没有差别，所以要通过步骤 1 先获取数据，预定义到代码中）</p><ul><li><p>开发时发现，自定义导航栏的实现需要 包含状态栏+胶囊 ：没有自定义导航栏的时候页面是全屏幕滚动会出现在状态栏的下一层</p></li><li><p>根据上一标题中步骤 1 的函数，可以获得状态栏高度 statusBarHeight</p></li><li>demo, <a href="wechatide://minicode/OLy3MGmM7zLJ" target="_blank" rel="noopener">点击打开小程序工具</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;Canvas&quot;&gt;&lt;a href=&quot;#Canvas&quot; class=&quot;headerlink&quot; title=&quot;Canvas&quot;&gt;&lt;/a&gt;Can
      
    
    </summary>
    
      <category term="微信小程序" scheme="http://www.surile.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://www.surile.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 的闭包</title>
    <link href="http://www.surile.cn/category/2018/09/15/%E5%AF%B9%E4%BA%8Ejs%E9%97%AD%E5%8C%85%E7%9A%84%E7%90%86%E8%A7%A3.html"/>
    <id>http://www.surile.cn/category/2018/09/15/对于js闭包的理解.html</id>
    <published>2018-09-15T14:30:51.000Z</published>
    <updated>2018-12-10T10:10:39.345Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --><h3 id="什么是闭包（Closure）"><a href="#什么是闭包（Closure）" class="headerlink" title="什么是闭包（Closure）"></a>什么是闭包（Closure）</h3><blockquote><p><strong>简单讲，闭包就是指有权访问另一个函数作用域中的变量的函数。</strong></p></blockquote><blockquote><p><strong>MDN 上面这么说：闭包是一种特殊的对象。</strong>它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。</p></blockquote><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>要理解闭包，就得理解Javascript函数作用域。<br>作用域无非就两种：全局作用域和局部作用域<br>看下面一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> <span class="comment">// 全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span> <span class="comment">// 局部作用域</span></span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">// 使用局部作用域中的变量 a，则输出2</span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 使用全局作用域中变量 a，则输出3</span></span><br></pre></td></tr></table></figure><p>根据作用域的规则，引擎会从当前执行的作用域开始查找变量，如果找到，则使用该变量，如果找不到，就向上一级继续查找，直到抵达最外层的全局作用域时，无论找到<br>还是没找到，查找的过程都会停止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">//使用全局作用域中的变量 a,所以输出的是2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//无法访问foo()作用域中定义的量变a,全局作用域又未定义变量，因此输出的是ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p>变量 a 在全局作用域下定义，则全局作用域下的局部作用域内的执行代码或者说是表达式都可以访问到变量 a 的值。局部变量里的同名变量（a）会截断对全局变量 a 的访问，因此在调用函数 foo()时会输出2。<strong>JavaScript作用域限制了普通方法是无法让外层作用域访问到内部作用域</strong>，因此在全局中输出变量a会是3。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> <span class="comment">// 全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span> <span class="comment">// 局部作用域</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a) <span class="comment">//使用的是 foo 的局部变量，所以输出的是3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> foo2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = foo1()</span><br><span class="line"></span><br><span class="line">result() <span class="comment">//输出的是3</span></span><br></pre></td></tr></table></figure><h3 id="闭包是如何产生的？"><a href="#闭包是如何产生的？" class="headerlink" title="闭包是如何产生的？"></a>闭包是如何产生的？</h3><p>实际上，上一节代码中的 foo1函数，就是闭包。<br>简单来讲，<strong><code>当函数外部能访问函数内部时</code></strong>，产生的就是闭包。我理解的是，闭包就是能在全局作用域调用局部作用域，所以闭包就是将函数外部和函数内部连接起来的一座桥梁。</p><h3 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h3><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。<br>在正常情况下，我们在外部时无法修改函数内部变量的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _internal = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_internal + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">print(<span class="number">1</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>我们可以看的，无论print()调用多少次，输出的值都是2，_internal的值是1</p><p>这是因为 JavaScript 中的垃圾回收机制，在多次调用 print() 时，每一次都需要回收前一次的内存，之后再次申请新内存，因此 _internal 无法在内存中继续保存。</p><p>那我们如何保存值，那就是使用—<strong>闭包</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _internal = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        _internal += x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(_internal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = print();</span><br><span class="line">test(); <span class="comment">// 1</span></span><br><span class="line">add(<span class="number">1</span>);</span><br><span class="line">test(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>经过上述可以看出，函数 print() 在经过 add() 运行之后，_internal 的值分别为 1 和 2，这就说明了 _internal 始终保存在内存中，并没有在 var test = print(); 调用时被回收。</p><p>这是因为 print() 内的 log() 作为返回值，被赋给 test 这个全局变量，因此 log() 始终在内存中。而 log() 依赖 print() 并且可以访问 _internal，所以 print() 也始终在内存中，而且在 var test = print(); 调用时没有被回收。</p><p>换而言之，当 _internal 在声明的时候分配了内存，我们可以将其内存地址表示为 0x…1，在 print() 函数被调用之后应该会被回收，但是由于上述原因，没有被回收，它的值将继续保留在地址为 0x…1 中。在外部可以使用指针去寻址，并取得其值。</p><h3 id="闭包的弊端"><a href="#闭包的弊端" class="headerlink" title="闭包的弊端"></a>闭包的弊端</h3><ul><li><p>内存泄漏：由于闭包会使得函数内部的变量都被保存在内存中，不会被销毁，内存消耗很大。因此需要在退出函数之前，将不使用的变量都删除。</p></li><li><p>会修改函数内部变量的值。</p></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="noopener">学习Javascript闭包（Closure）</a><br><a href="https://segmentfault.com/a/1190000009795532" target="_blank" rel="noopener">理解闭包</a><br><a href="https://segmentfault.com/a/1190000014980841" target="_blank" rel="noopener">讲清楚之javascript作用域</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;什么是闭包（Closure）&quot;&gt;&lt;a href=&quot;#什么是闭包（Closure）&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://www.surile.cn/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue静态资源打包中的坑与解决方案</title>
    <link href="http://www.surile.cn/category/2018/08/18/vue%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85%E4%B8%AD%E7%9A%84%E5%9D%91%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
    <id>http://www.surile.cn/category/2018/08/18/vue静态资源打包中的坑与解决方案.html</id>
    <published>2018-08-18T15:15:32.000Z</published>
    <updated>2018-12-10T10:10:39.344Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --><h3 id="vue静态资源打包中的坑与解决方案"><a href="#vue静态资源打包中的坑与解决方案" class="headerlink" title="vue静态资源打包中的坑与解决方案"></a>vue静态资源打包中的坑与解决方案</h3><hr><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>记录一下在使用 vue-cli 时的坑，vue-cli 脚手架生成的默认打包配置文件情况下运行 npm run build || yarn build 打包后静态文件出现404</p></blockquote><p><img src="http://ox54z18lh.bkt.clouddn.com/2018-08-18-23-21-17.png" alt="2018-08-18-23-21-17"></p><p>以上图，就是出现的问题</p><p>如何解决：<br>vue-cli 官方文档已经说明。请看图。<br><img src="http://ox54z18lh.bkt.clouddn.com/2018-08-18-23-26-27.png" alt="2018-08-18-23-26-27"><br>vue 官方文档说明是在 vue.config.js 将 baseUrl 修改<br>按照官方文档修改，发现再次运行build时，就没有出现静态文件404</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;vue静态资源打包中的坑与解决方案&quot;&gt;&lt;a href=&quot;#vue静态资源打包中的坑与解决方案&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="vue" scheme="http://www.surile.cn/categories/vue/"/>
    
    
      <category term="vue" scheme="http://www.surile.cn/tags/vue/"/>
    
      <category term="vue-cli" scheme="http://www.surile.cn/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>部署项目到 GitHub</title>
    <link href="http://www.surile.cn/category/2018/08/18/%E5%88%A9%E7%94%A8-git-subtree-%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0-github.html"/>
    <id>http://www.surile.cn/category/2018/08/18/利用-git-subtree-部署项目到-github.html</id>
    <published>2018-08-18T09:21:48.000Z</published>
    <updated>2018-12-10T10:10:39.344Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --><h2 id="git-subtree-教程"><a href="#git-subtree-教程" class="headerlink" title="git subtree 教程"></a>git subtree 教程</h2><hr><blockquote><p>关于子仓库或者说是仓库共用，git官方推荐的工具是git subtree。 我自己也用了一段时间的git subtree，感觉比git submodule好用，但是也有一缺点，在可接受的范围内。所以对于仓库共用，在git subtree 与 git submodule之中选择的话，我推荐git subtree。</p></blockquote><h3 id="git-subtree是什么？为什么使用git-subtree"><a href="#git-subtree是什么？为什么使用git-subtree" class="headerlink" title="git subtree是什么？为什么使用git subtree"></a>git subtree是什么？为什么使用git subtree</h3><hr><p>git subtree 可以实现一个仓库作为其他仓库的子仓库。</p><p><img src="https://ws4.sinaimg.cn/large/006a7eb0gy1fudzdrze4mj30m809pjt7.jpg" alt="subtree"></p><p>使用git subtree 有以下几个原因：</p><ul><li>旧版本的git也支持(最老版本可以到 v1.5.2).</li><li>git subtree与git submodule不同，它不增加任何像<code>.gitmodule</code>这样的新的元数据文件.</li><li>git subtree对于项目中的其他成员透明，意味着可以不知道git subtree的存在.<br>当然，git subtree也有它的缺点，但是这些缺点还在可以接受的范围内：</li><li>必须学习新的指令(如：git subtree).</li><li>子仓库的更新与推送指令相对复杂。</li></ul><h3 id="git-subtree-的使用"><a href="#git-subtree-的使用" class="headerlink" title="git subtree 的使用"></a>git subtree 的使用</h3><hr><p>git subtree的主要命令有：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree pull  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree push  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree merge --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree split --prefix=&lt;prefix&gt; [OPTIONS] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure><p></p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><hr><p>我们先在github 中创建vue-login，然后按照 GitHub 上的提示将项目克隆到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/surile/vue-login.git</span><br></pre></td></tr></table></figure><p>vue-login的路径为<a href="https://github.com/surile/vue-login.git，仓库里的文件有：" target="_blank" rel="noopener">https://github.com/surile/vue-login.git，仓库里的文件有：</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vue-login</span><br><span class="line">|</span><br><span class="line">|-- build</span><br><span class="line">|-- pulish</span><br><span class="line">|-- src</span><br><span class="line">|-- webpack.common.js</span><br><span class="line">|-- webpack.prod.js</span><br><span class="line">|-- webpack.dev.js</span><br><span class="line">\-- README.md</span><br></pre></td></tr></table></figure><p>以下操作均位于根目录中。<br>我们执行以下命令把master 分支中的 build 文件推送到远程仓库gh-pages分支中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn build || npm run build</span><br><span class="line">git checkout -b gh-pages</span><br><span class="line">git add -f build</span><br><span class="line">git commit -m <span class="string">'created gh-pages'</span></span><br><span class="line">git subtree push --prefix build origin gh-pages</span><br></pre></td></tr></table></figure><p>这步做完之后就可以在 GitHub 上看见 gh-pages 分支了。GitHub 会自动部署 gh-pages 里的静态文件。<br>点开 Settings，将会看到以下内容。勾出绿色部分则是你的URL<br><img src="http://ox54z18lh.bkt.clouddn.com/2018-08-18-17-50-53.png" alt="2018-08-18-17-50-53"></p><p>当我们修改项目完成之后，肯定是要从前 build 的。这时使用以下命令，则就没用了。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn build || npm run build</span><br><span class="line">git add -f build</span><br><span class="line">git commit -m <span class="string">'重新 build'</span></span><br><span class="line">git subtree push --prefix build origin gh-pages</span><br></pre></td></tr></table></figure><p></p><p>会出现以下错误。<br><img src="http://ox54z18lh.bkt.clouddn.com/2018-08-18-17-58-08.png" alt="2018-08-18-17-58-08"></p><p>出现这种错误，根据提示我们可以看出来，是要让我们强行将 build 推送到远程gh-pages 分支上，则可以用以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin `git subtree split --prefix build master`:gh-pages --force</span><br></pre></td></tr></table></figure><p><img src="http://ox54z18lh.bkt.clouddn.com/2018-08-18-18-02-06.png" alt="2018-08-18-18-02-06"></p><p>运行命令，则可以强制将 build 文件夹推送到远程 gh-pages 分支上了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;git-subtree-教程&quot;&gt;&lt;a href=&quot;#git-subtree-教程&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="git" scheme="http://www.surile.cn/categories/git/"/>
    
    
      <category term="git" scheme="http://www.surile.cn/tags/git/"/>
    
      <category term="node" scheme="http://www.surile.cn/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>如何让pm2支持es6</title>
    <link href="http://www.surile.cn/category/2018/08/18/%E5%A6%82%E4%BD%95%E8%AE%A9pm2%E6%94%AF%E6%8C%81es6.html"/>
    <id>http://www.surile.cn/category/2018/08/18/如何让pm2支持es6.html</id>
    <published>2018-08-18T08:02:30.000Z</published>
    <updated>2018-12-10T10:10:39.345Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>就如同标题一样如何让pm2支持es6，现在 es6已经是满天飞了，写 node 的时候肯定也要用es6咯，所以才会出现如何将pm2支持es6。</p></blockquote><h4 id="PM2官网介绍"><a href="#PM2官网介绍" class="headerlink" title="PM2官网介绍"></a>PM2官网介绍</h4><p><img src="https://wx2.sinaimg.cn/large/006a7eb0gy1fudx270iqrj30jg07gt9o.jpg" alt="PM2官网介绍"></p><p>问题是我按照官网介绍使用之后还是不能让 pm2 支持es6，好烦。。。</p><p>重新看了下官网文档，看到有这么一段</p><p><img src="https://ws4.sinaimg.cn/large/006a7eb0gy1fudxcy6thcj30jg03mq3u.jpg" alt="PM2"></p><p>其实这段代码 我在对应的ecosystem.config.js（简单说 就是pm2的配置文件，类似npm的package.json）里写过对应的，但没起作用。看到这我才明白为啥没起作用： <code>pm2默认服务是负载均衡的，注意红框中的话：没错，它只能工作在fork模式下。</code>所以我那就一直没跑起来。</p><p>但如果不用负载均衡，感觉又何必用pm2呢？它的优势不就是这个吗？所以又往下看。果然，pm2提供了解决方法：</p><p>单写一个js文件，内容如下。pm2 直接运行这个文件即可。既解决了koa的es6编译的问题，又能使用pm2的负载均衡。<code>以下内容只能解决 import</code></p><p><img src="https://wx3.sinaimg.cn/large/006a7eb0gy1fudxha82aqj30jg05q0t6.jpg" alt="Import"></p><p>运行起来，PM25的状态是 online，但是查看 PM2 logs 时发现报错了。特么我以为以上命令是支持所有 es6，没想到却报以下错误</p><p><img src="http://ox54z18lh.bkt.clouddn.com/2018-08-18-16-38-29.png" alt="2018-08-18-16-38-29"></p><p>wtf，竟然又报错。我就去谷歌，找了半天找到了。</p><p>还是一样单写一个 js，内容如下。pm2直接运行这个文件就可以了。</p><p><img src="http://ox54z18lh.bkt.clouddn.com/2018-08-18-16-39-42.png" alt="2018-08-18-16-39-42"></p><p>我在去查看 logs 时，终于没在报错了。(<em>^▽^</em>)。完美的解决了我的问题。hhhhhh</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockqu
      
    
    </summary>
    
      <category term="node" scheme="http://www.surile.cn/categories/node/"/>
    
    
      <category term="node" scheme="http://www.surile.cn/tags/node/"/>
    
      <category term="pm2" scheme="http://www.surile.cn/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>vue项目脚手架说明</title>
    <link href="http://www.surile.cn/category/2018/05/17/vue%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6%E8%AF%B4%E6%98%8E.html"/>
    <id>http://www.surile.cn/category/2018/05/17/vue项目脚手架说明.html</id>
    <published>2018-05-17T10:20:29.000Z</published>
    <updated>2018-12-10T10:10:39.344Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --><h2 id="Vue-项目脚手架搭建说明"><a href="#Vue-项目脚手架搭建说明" class="headerlink" title="Vue 项目脚手架搭建说明"></a>Vue 项目脚手架搭建说明</h2><ol><li><p><strong>安装 node.js 支持；</strong></p><blockquote><p>node.js 安装步骤不于此过多赘述。</p></blockquote></li><li><p><strong>npm 安装 vue-cli 脚手架并创建项目；</strong></p></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 vue-cli</span><br><span class="line">$ npm install --global vue-cli</span><br><span class="line"># 创建一个基于 webpack 模板的新项目</span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"># 安装依赖...</span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br><span class="line">$ npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p><strong>创建初始化项目时选项部分说明:</strong></p><blockquote><p><strong>【Project name (vuetest)】</strong> 项目名称，可以自己指定，也可直接回车，按照括号中默认名字（注意这里的名字不能有大写字母)<br><strong>【Project description (A Vue.js project)】</strong> 项目描述，也可直接点击回车，使用默认名字<br><strong>【Author】</strong> 作者<br><strong>【Runtime + Compiler】</strong> 运行时编译<br><strong>【Install vue-router? (Y/n)】</strong> 是否安装 vue-router，官方的路由，大多数情况下都会使用,y+回车<br><strong>【Use ESLint to lint your code? (Y/n)】</strong> 是否使用 ESLint 管理代码，ESLint 是个代码风格管理工具，是用来统一代码风格的，并不会影响整体的运行，为了多人协作，一般项目中都会使用。<br><strong>【Standard】</strong> 代码风格标准<br><strong>【Setup unit tests with Karma + Mocha? (Y/n)】</strong> 是否安装单元测试<br><strong>【Setup e2e tests with Nightwatch(Y/n)?】</strong> 是否安装 e2e 测试<br><strong>【should we run <code>npm install</code> for…】</strong> NPM 和 YARN 选项</p></blockquote><p><strong>依赖例举：</strong></p><blockquote><p><strong>【jquery】</strong> $ npm install jquery<br><strong>【bootstrap】</strong> $ npm install bootstrap<br><strong>【bootstrap-webpack】</strong> $ npm install bootstrap-webpack<br><strong>【style-loader】</strong> $ npm install style-loader</p></blockquote><ol start="3"><li><strong>调整配置文件中 webpack-server-dev 的执行端口</strong></li></ol><blockquote><p>位置: config\index.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    port: <span class="number">8089</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>测试路由 router 对组件的支持</strong></li></ol><blockquote><p>位置: src\router\index.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加测试用组件</span></span><br><span class="line"><span class="keyword">const</span> page1 = &#123; <span class="attr">template</span>: <span class="string">`&lt;p&gt;this is page1..&lt;/p&gt;`</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> page2 = &#123; <span class="attr">template</span>: <span class="string">`&lt;p&gt;this is page2..&lt;/p&gt;`</span> &#125;;</span><br><span class="line"><span class="comment">// 装载入路由对象并返回</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      name: <span class="string">"HelloWorld"</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/page1"</span>,</span><br><span class="line">      name: <span class="string">"page1"</span>,</span><br><span class="line">      component: page1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/page2"</span>,</span><br><span class="line">      name: <span class="string">"page2"</span>,</span><br><span class="line">      component: page2</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>修改 App.vue ,添加路由支持(模拟导航)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/page1"</span>&gt;</span>page1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/page2"</span>&gt;</span>page2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过 npm start 启动服务器, 在浏览器观察路由结果</p></blockquote><ol start="5"><li><strong>添加自定义组件</strong><blockquote><p>以 HelloWorld.vue 为参考, 单组件主要划分为以下三部分</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 模板部分内容 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// js部分内容</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 样式部分内容 */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>template</strong> 部分模板支持所有 vue 在 html 标签部分的动作应用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"col-md-8 col-md-offset-2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">for</span>=<span class="string">"exampleInputAmount"</span>&gt;</span>Amount (in dollars)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>找歌:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"searchKey"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"songController"</span> <span class="attr">placeholder</span>=<span class="string">"请输入歌手名或歌曲名"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">v-on:click</span>=<span class="string">"foo"</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>歌名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>歌手<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>播放<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"o in arr"</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;o.singerid&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;o.songname&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;o.singername&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">audio</span> <span class="attr">:src</span>=<span class="string">"o.m4a"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>script</strong> 部分主要向调用者返回当前组件的实例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">"jquery"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"ABTable"</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 调用jquery的ajax发送请求</span></span><br><span class="line">      $.post(</span><br><span class="line">        <span class="string">"http://route.showapi.com/213-1"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          showapi_appid: <span class="string">"3***1"</span>,</span><br><span class="line">          showapi_sign: <span class="string">"3c1a7*****************b624"</span>,</span><br><span class="line">          keyword: <span class="keyword">this</span>.searchKey</span><br><span class="line">        &#125;,</span><br><span class="line">        res =&gt; &#123;</span><br><span class="line">          <span class="comment">// success 回调函数</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"返回歌曲信息: "</span>, res);</span><br><span class="line">          <span class="comment">// 解析并重构数组</span></span><br><span class="line">          <span class="keyword">if</span> (res.showapi_res_code == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> newArr = res.showapi_res_body.pagebean.contentlist;</span><br><span class="line">            <span class="keyword">this</span>.arr = newArr;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      arr: [</span><br><span class="line">        &#123; <span class="attr">singerid</span>: <span class="number">11</span>, <span class="attr">songname</span>: <span class="string">"薛之谦"</span>, <span class="attr">singername</span>: <span class="string">"暧昧"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">singerid</span>: <span class="number">12</span>, <span class="attr">songname</span>: <span class="string">"薛之谦"</span>, <span class="attr">singername</span>: <span class="string">"丑八怪"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">singerid</span>: <span class="number">13</span>, <span class="attr">songname</span>: <span class="string">"薛之谦"</span>, <span class="attr">singername</span>: <span class="string">"演员"</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">      searchKey: <span class="string">""</span> <span class="comment">// 绑定用户输入的搜索框</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><strong>style</strong> 部分是组件样式, 可以封装样式不污染其他组件</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span> <span class="selector-tag">scoped</span>&gt;</span><br><span class="line">  <span class="selector-tag">section</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">th</span>,<span class="selector-tag">td</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>将添加的新组件置入路由对象</strong><blockquote><p>路由位置: src\router\index.js</p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ABTable <span class="keyword">from</span> <span class="string">"@/components/ABTable"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      name: <span class="string">"HelloWorld"</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/table"</span>,</span><br><span class="line">      name: <span class="string">"ABTable"</span>,</span><br><span class="line">      component: ABTable</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>顺带一提, 别忘了 App.vue 中修改导航</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/table"</span>&gt;</span>table<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li><strong>发布版导出</strong><blockquote><p>命令行输入<code>npm run build</code>用于输出项目至发布版</p></blockquote></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><blockquote><p>当前版本的 vue-cli 在生成发布项目时有一个小 bug,目录的引用都是以”/“为开头,因此生成的静态文件引用是这样的:</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">/static/js/manifest.82563f550e3364c6fa20.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">/static/js/vendor.32e48b8738cad2a0755b.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">/static/js/app.4c9592f4bed760201e6e.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是项目目录结构是这样的:</p><blockquote><p>– dist<br>—-static<br>——- + css<br>——- + fonts<br>——- + img<br>——- + js<br>—-index.html</p></blockquote><p>有些浏览器不支持这样的路径引用, 因此可以更改配置文件中关于生成的目录定义:</p><blockquote><p>配置文件位置: config\index.js<br>修改 build 对象中的 <code>assetsPublicPath</code> 属性为<code>./</code></p></blockquote><p>简单的生产环境 Vue 使用实例，仅用于抛砖引玉。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;Vue-项目脚手架搭建说明&quot;&gt;&lt;a href=&quot;#Vue-项目脚手架搭建说明&quot; class=&quot;headerlink&quot; title=&quot;V
      
    
    </summary>
    
      <category term="vue" scheme="http://www.surile.cn/categories/vue/"/>
    
    
      <category term="vue" scheme="http://www.surile.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建：（二）Hexo 配置,安装 Next 主题</title>
    <link href="http://www.surile.cn/category/2018/04/29/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89hexo-%E9%85%8D%E7%BD%AE-%E5%AE%89%E8%A3%85-next-%E4%B8%BB%E9%A2%98.html"/>
    <id>http://www.surile.cn/category/2018/04/29/Hexo博客搭建：（二）hexo-配置-安装-next-主题.html</id>
    <published>2018-04-28T17:06:47.000Z</published>
    <updated>2018-12-10T10:10:39.330Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 所初始化的站点文件夹根目录下的 <code>._config.yml</code> 文件声明了网站的配置信息，我们可以通过修改此文件的配置参数以个性化网站。</p><h3 id="配置文件-config-yml"><a href="#配置文件-config-yml" class="headerlink" title="配置文件_config.yml"></a>配置文件_config.yml</h3><p>Hexo 生成的网站的配置信息均保存在 <code>._config.yml</code> 文件中，该文件位于站点文件夹下的根目录下。</p><p>我们可以通过修改 <code>._config.yml</code> 文件中的参数配置来自定义 Hexo 生成的静态站点。</p><p>使用文本编辑器打开该文件，我们会发现其中有详尽的参数，这里只选取一部分具有代表性的参数配置进行介绍。详情戳这里 ⇨ <a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">配置</a>。</p><h5 id="网站相关"><a href="#网站相关" class="headerlink" title="网站相关"></a>网站相关</h5><ul><li><code>title</code> ：网站标题</li><li><code>subtitle</code> ：网站副标题</li><li><code>description</code> ：网站描述</li><li><code>author</code> ：作者名字</li></ul><h5 id="网址相关"><a href="#网址相关" class="headerlink" title="网址相关"></a>网址相关</h5><ul><li><code>url</code> ：网址</li><li><code>root</code> ：网站根目录</li></ul><h5 id="文章相关"><a href="#文章相关" class="headerlink" title="文章相关"></a>文章相关</h5><ul><li><code>auto_spacing</code> ：在中文和英文之间加入空格，默认值为 false</li><li><code>external_link</code> ：在新标签中打开链接，默认值为 true</li><li><code>render_drafts</code> ：显示草稿，默认值为 false</li><li><code>post_asset_folder</code> ：开启文章地资源管理文件夹，默认值为 false</li><li><code>highlight</code> ：代码块的设置，包括有 enable、line_number、auto_detect 和 tab_replace 属性可设置。不过一般不用修改，大多数主题都默认是支持代码语法高亮等设置的。</li></ul><h5 id="分页相关"><a href="#分页相关" class="headerlink" title="分页相关"></a>分页相关</h5><ul><li><code>per_page</code> ：每页显示的文章数，默认值为 10，值为 0 时会关闭分页功能</li></ul><h3 id="新建菜单页"><a href="#新建菜单页" class="headerlink" title="新建菜单页"></a>新建菜单页</h3><p>Hexo 生成的站点默认菜单也有限，如果我们想自定义添加菜单页该怎么操作呢？比如说，我们想新建一个名为 <code>Abou</code> 的菜单页。</p><p>站点根目录下，命令行中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"about"</span></span><br></pre></td></tr></table></figure><p>上面的命令生效以后，根目录下的 <code>source</code> 文件夹中会新增一个名为 <code>about</code> 的文件夹，里面有个 <code>index.md</code> 文档。我们将想要在 <code>About</code> 菜单页中显示的内容，按照博文格式写在这个文档里即可。</p><p>然后，修改 <code>./themes/your-theme-name/_config.yml</code> 文件中的 <code>menu</code> 项，在下面添加一行 <code>About: /about</code> 即可。</p><h3 id="示范"><a href="#示范" class="headerlink" title="示范"></a>示范</h3><p>下图是我修改了网站相关配置参数值之后的网站首页，可以很明显地看出与网站标题与副标题发生了变化。</p><p><img src="https://ws4.sinaimg.cn/large/006a7eb0gy1fue0pmz4p5j30mf05cjw1.jpg" alt="示范"></p><h3 id="安装-Next-主题"><a href="#安装-Next-主题" class="headerlink" title="安装 Next 主题"></a>安装 Next 主题</h3><ul><li><p>下载主题</p><p>两种方式下载主题，第一种则是 git，第二种则是下载安装包，解压出来。</p><ul><li>git 方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><ul><li><p>下载安装包</p><p><img src="http://ox54z18lh.bkt.clouddn.com/2018-08-18-18-19-13.png" alt="2018-08-18-18-19-13"></p><p>解压所下载的压缩包至站点的 themes 目录下， 并将 解压后的文件夹名称（hexo-theme-next-0.4.0）更改为 next。</p></li></ul></li><li><p>主题启用</p><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。</p></li><li><p>验证主题</p><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s –debug。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>此时即可使用浏览器访问 <a href="http://localhost:4000，检查站点是否正确运行。" target="_blank" rel="noopener">http://localhost:4000，检查站点是否正确运行。</a></p><p><img src="https://ws2.sinaimg.cn/large/006a7eb0gy1fue0ynyk7sj30lf0bxmxx.jpg" alt="主题"></p><p>看到以上图片，则 next 主题安装成功 ⇨ <a href="https://theme-next.iissnan.com/getting-started.html#select-scheme" target="_blank" rel="noopener">其他配置</a></p></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Hexo 
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.surile.cn/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.surile.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="http://www.surile.cn/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建：（一）安装及使用初体验</title>
    <link href="http://www.surile.cn/category/2018/04/28/hexo-%E5%92%8C-GitHub-Pages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html"/>
    <id>http://www.surile.cn/category/2018/04/28/hexo-和-GitHub-Pages-搭建博客.html</id>
    <published>2018-04-28T14:32:45.000Z</published>
    <updated>2018-12-10T10:10:39.330Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直都有想过搭建博客,记录一些技术上的问题或者是生活上遇到什么事 ,也想过用 WordPress 来搭建博客,但一直没找到自己满意的主题,自己去写呢,又一直没写,还是因为自己懒,在 17 年的时候用 PHP 也写过博客,前台和后台已经写好了,就差部署了,但是呢又觉得那里不好,so 就一直拖到现在了.本文主要是记录下在使用 hexo 来搭建博客的过程和优化</p><a id="more"></a><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>Hexo 是一个由 Node.js 驱动的快速、简洁、高效的博客框架。</p><p>Hexo 具有许多优点，使用它我们可以快速地搭建自己的本地博客站点，并能将其推送到 GitHub 仓库。这篇文章简单介绍了 Hexo 地安装及初次使用。</p><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><ul><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node</a></li></ul><p>此处就不再赘述以上二者的安装过程，点击链接去官网下载与自己操作系统对应的版本，按照默认配置一步步安装即可。不会就去谷歌或者是问度娘</p><p>安装完成之后,命令提示输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">$ node --version</span><br></pre></td></tr></table></figure><p>出现 Git 版本号和 node 版本号,到此 Git 和 node 就安装好了</p><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p>在命令行输入以下命令，以将 Hexo 安装到全局环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>成功安装后，会出现诸如 – <a href="mailto:hexo-cli@1.0.2" target="_blank" rel="noopener">hexo-cli@1.0.2</a> 的提示信息。</p><p>注意！提示信息末尾可能会出现 npm WARN 警告信息，不过不要怕，那不会影响使用的，只要不是 npm ERROR 错误消息就好 (^_^)！</p><h2 id="初始化站点文件夹"><a href="#初始化站点文件夹" class="headerlink" title="初始化站点文件夹"></a>初始化站点文件夹</h2><p>接下来,运行命令初始化一个文件夹,作为我们的站点名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  hexo init &lt;站点名称&gt;</span><br></pre></td></tr></table></figure><p>接着下来就是新建的文件夹&lt;站点名称&gt;,继续安装站点所需要的 npm 依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;站点名称&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h2 id="站点初体验"><a href="#站点初体验" class="headerlink" title="站点初体验"></a>站点初体验</h2><p>别担心，尽管到现在为止我们一篇文章也没写，而且站点主题也没经过任何配置，但还是会看到效果的。因为 Hexo 初始化的全新站点文件夹有一个内置的默认主题样式，同时也有一篇 Hello World 文章。</p><h2 id="清理缓存文件"><a href="#清理缓存文件" class="headerlink" title="清理缓存文件"></a>清理缓存文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>此命令用于清除缓存文件（db.json）和已生成的静态文件(public)。</p><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>此命令用于生成静态文件，就是按照主题的模板文件配置将 markdown 文件生成为静态 html 文件。</p><p>此命令可简写为 <code>hexo g</code>。</p><p>当运行上述命令后，我们站点文件夹的目录结构下会多出一个 public 文件夹，这个文件夹中的文件就是 Hexo 帮我们生成的站点静态文件。</p><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>此命令会启动 hexo 服务器,可简写为 <code>hexo s</code></p><p>默认状态下，我们的网站是运行在 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，使用浏览器打开这个地址就可看到效果。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 11 2019 17:18:11 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直都有想过搭建博客,记录一些技术上的问题或者是生活上遇到什么事 ,也想过用 WordPress 来搭建博客,但一直没找到自己满意的主题,自己去写呢,又一直没写,还是因为自己懒,在 17 年的时候用 PHP 也写过博客,前台和后台已经写好了,就差部署了,但是呢又觉得那里不好,so 就一直拖到现在了.本文主要是记录下在使用 hexo 来搭建博客的过程和优化&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.surile.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.surile.cn/tags/hexo/"/>
    
      <category term="github" scheme="http://www.surile.cn/tags/github/"/>
    
  </entry>
  
</feed>
